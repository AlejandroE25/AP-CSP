{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ngyro DrivetrainGyro = gyro(PORT4, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 200);\n\nmotor Claw = motor(PORT11, false);\nmotor Arm = motor(PORT10, false);\nsonar Dist = sonar(PORT7);\nbumper Bump = bumper(PORT8);\ntouchled LED = touchled(PORT2);\ncolorsensor Colour = colorsensor(PORT3);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate();\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n#pragma endregion VEXcode Generated Robot Configuration\n\n//----------------------------------------------------------------------------\n//                                                                            \n//    Module:       main.cpp                                                  \n//    Author:       {author}                                                  \n//    Created:      {date}                                                    \n//    Description:  IQ project                                                \n//                                                                            \n//----------------------------------------------------------------------------\n\n// Include the IQ Library\n#include \"iq_cpp.h\"\n\n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint ClawOpenPos = -45; //Position in degrees of the claw when open\nint ClawClosedPos = 60; //Position in degrees of the claw when closed\n\nvoid Telemetry(){\n  int num = 0;\n  while (true){\n    Brain.Screen.setCursor(1,1);\n    Brain.Screen.print(\"HELLO\");\n    Brain.Screen.newLine();\n    num ++;\n    Brain.Screen.print(\"%d\",num);\n    Brain.Screen.newLine();\n    Brain.Screen.print(\"%s\", Bump.pressing() ? \"true\" : \"false\");\n\n    wait(100,msec);\n    Brain.Screen.clearScreen();\n  }\n}\n\nvoid LittleLamb(){\n  while (true) {\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,0,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,2,500);\n\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,1,500);\n\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,4,250);\n    Brain.playNote(4,4,500);\n\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,0,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,2,500);\n\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,2,250);\n    Brain.playNote(4,1,250);\n    Brain.playNote(4,0,1000);\n    wait(1,seconds);\n  }\n}\n\n\nvoid CloseClaw(){ //Closes the claw\n  Claw.setTimeout(2,seconds);\n  Claw.spinToPosition(ClawClosedPos, degrees);\n}\n\nvoid LiftArm(){ //Raises the Arm\n  Arm.setTimeout(2,seconds);\n  Arm.spinToPosition(1000,degrees);\n}\n\nvoid LowerArm(){ //Lowers the arm\n  Arm.spinToPosition(0,degrees);\n}\n\nvoid Left90(){ //Easy function to turn Left by 90 degrees\n  Drivetrain.turnFor(left,90,degrees);\n}\n\nvoid Left180(){ //Easy function to turn Left by 90 degrees\n  Drivetrain.turnFor(left,180,degrees);\n}\n\nvoid Right90(){ //Easy function to turn Right by 90 degrees\n  Drivetrain.turnFor(right,90,degrees);\n}\nvoid Right180(){ //Easy function to turn Right by 90 degrees\n  Drivetrain.turnFor(right,180,degrees);\n}\n\nvoid OpenClaw(){ //Easy function to open the claw\n  Claw.setTimeout(2,seconds);\n  Claw.spinToPosition(ClawOpenPos,degrees);\n}\n\nvoid DriveForward(int distanceInMM){ //Drives forward the inputted distance in millimeters\n  Drivetrain.driveFor(forward, distanceInMM, mm);\n}\n\nvoid DriveBackward(int distanceInMM){ //Drives Backwards for the inputted distance in millimeters\n  Drivetrain.driveFor(reverse, distanceInMM, mm);\n}\n\nvoid PreSetupBot(){ //Pre configures the bot to work as intended\n  Claw.setStopping(hold);\n  Claw.setVelocity(100, percent);\n  Claw.setMaxTorque(80,percent);\n  Drivetrain.setDriveVelocity(80,percent);\n  Drivetrain.setTurnVelocity(100,percent);\n  \n  Arm.setVelocity(100,percent);\n  Arm.setStopping(hold);\n  Arm.setTimeout(2,seconds);\n}\n\nvoid Party(){\n\n  while (true){\n    while (LED.pressing()){\n      wait(25,msec);\n    }\n    LED.setColor(blue);\n    wait(100,msec);\n    LED.setColor(blue_green);\n    wait(100,msec);\n    LED.setColor(blue_violet);\n    wait(100,msec);\n    LED.setColor(green);\n    wait(100,msec);\n    LED.setColor(orange);\n    wait(100,msec);\n    LED.setColor(purple);\n    wait(100,msec);\n    LED.setColor(red);\n    wait(100,msec);\n    LED.setColor(red_orange);\n    wait(100,msec);\n    LED.setColor(red_violet);\n    wait(100,msec);\n    LED.setColor(violet);\n    wait(100,msec);\n  }\n}\n\nbool greenLight = true;\nbool redLight = false;\nbool blueLight = false;\n\nvoid IndicatorLight(){\n  while (true){\n    while (redLight){\n      LED.setColor(red);\n      wait(25,msec);\n    }\n    while (greenLight) {\n      LED.setColor(green);\n      wait(25,msec);\n    }\n    while (blueLight){\n      LED.setColor(blue);\n      wait(25,msec);\n    }\n  }\n}\n\nbool ObjectDetected(){\n  if (Dist.distance(mm) < 50){\n    return true;\n  }\n    \n  else{\n    return false;\n  }\n\n}\n\nvoid FlapWings() {\n  Claw.setVelocity(100,percent);\n  while (true){\n    Claw.spinToPosition(ClawOpenPos, degrees);\n    wait(25,msec);\n    Claw.spinToPosition(0, degrees);\n    wait(25,msec);\n  }\n}\n\n\nvoid checkForTouch(){\n  while (true){\n    while (LED.pressing()){\n      Drivetrain.stop();\n      Claw.stop();\n      wait(25,msec);\n    }\n    wait(25,msec);\n  }\n}\n\n\nvoid SpazAttack() {\n  // Begin project code\n  PreSetupBot(); // Lock the Arm\n  Colour.setLight(100,percent); //Turn on the light\n  thread party = thread(Party); // Turn on the party lights\n  thread wings = thread(FlapWings);\n  thread checkTouch = thread(checkForTouch);\n\n  while (true){\n    DriveForward(20);\n    DriveBackward(20);\n    wait(25,msec);\n\n  }\n}\n\nbool hasStopped = false;\n\nvoid CheckForTheStupidBloodyBlock() {\n  while (true){\n    while (LED.pressing()){\n      wait(25,msec);\n    }\n    LED.setColor(blue);\n    wait(100,msec);\n    LED.setColor(blue_green);\n    wait(100,msec);\n    LED.setColor(blue_violet);\n    wait(100,msec);\n    LED.setColor(green);\n    wait(100,msec);\n    LED.setColor(orange);\n    wait(100,msec);\n    LED.setColor(purple);\n    wait(100,msec);\n    LED.setColor(red);\n    wait(100,msec);\n    LED.setColor(red_orange);\n    wait(100,msec);\n    LED.setColor(red_violet);\n    wait(100,msec);\n    LED.setColor(violet);\n    wait(100,msec);\n  }\n}\n\n\nvoid DriveStraight(int distance, int heading, int velocity, int kpValue) {\n  LeftDriveSmart.setPosition(0,degrees);\n  RightDriveSmart.setPosition(0,degrees);\n  if (velocity > 0){\n    //Going forward\n    while (LeftDriveSmart.position(degrees) < distance){\n      int error = heading - DrivetrainGyro.rotation();\n      int output = error * kpValue;\n      LeftDriveSmart.setVelocity(velocity - output, percent);\n      RightDriveSmart.setVelocity(velocity + output, percent);\n      LeftDriveSmart.spin(forward);\n      RightDriveSmart.spin(forward); \n    } \n  }\n  else {\n    //Going Backward\n    while (LeftDriveSmart.position(degrees) > distance){\n      int error = heading - DrivetrainGyro.rotation();\n      int output = error * kpValue;\n      LeftDriveSmart.setVelocity(velocity - output, percent);\n      RightDriveSmart.setVelocity(velocity + output, percent);\n      LeftDriveSmart.spin(forward);\n      RightDriveSmart.spin(forward);\n    }\n  }\n  LeftDriveSmart.stop();\n  RightDriveSmart.stop();\n}\n\nvoid PreciseTurn(int heading, int velocity, int momentum){\n    if (heading > DrivetrainGyro.rotation()){\n      //Left Turn\n      while (heading - momentum > DrivetrainGyro.rotation()){\n        LeftDriveSmart.setVelocity(velocity, percent);\n        RightDriveSmart.setVelocity(velocity, percent);\n        LeftDriveSmart.spin(reverse);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    else {\n      //Right Turn\n      while (heading + momentum < DrivetrainGyro.rotation()){\n        LeftDriveSmart.setVelocity(velocity, percent);\n        RightDriveSmart.setVelocity(velocity, percent);\n        LeftDriveSmart.spin(forward);\n        RightDriveSmart.spin(reverse);\n      }\n\n    }\n  LeftDriveSmart.stop();\n  RightDriveSmart.stop();\n}\n\n\n\nint main(){\n  PreSetupBot();\n  Colour.setLight(100,percent);\n  while (true) {\n    Brain.Screen.setCursor(1,1);\n    LED.setColor(white); // Just 'cause\n\n    Brain.Screen.print(\"%d\", Colour.hue());\n\n    if (Colour.hue() > 180 && Colour.hue() < 200){\n      LED.setColor(green); // It detects green, light it green\n      Drivetrain.turnFor(right,90,degrees); //TURN RIGHT\n    }\n    else if (Colour.hue() > 230 && Colour.hue() < 235){ // IF not Greeny\n      LED.setColor(Colour.colorname()); // Change light to colour\n      Drivetrain.turnFor(left,90,degrees); // TURN LEFT\n    }\n    else if (Colour.hue() > 320 && Colour.hue() < 355){\n      LED.setColor(Colour.colorname());\n      Drivetrain.turnFor(left,90,degrees);\n    }\n    else {\n      Drivetrain.stop(); // STOP STOP\n    }\n    wait(25,msec);\n    Brain.Screen.clearScreen();\n  }\n}","textLanguage":"cpp","rconfig":[{"port":[1,6,4],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[11],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[10],"name":"Arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[7],"name":"Dist","customName":true,"deviceType":"Distance","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[8],"name":"Bump","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[2],"name":"LED","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[3],"name":"Colour","customName":true,"deviceType":"Color","deviceClass":"colorsensor","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20211210.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}